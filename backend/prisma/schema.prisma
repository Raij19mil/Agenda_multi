// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema principal para gestão de tenants e usuários
model Tenant {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  theme       String   @default("default")
  settings    Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users        User[]
  clients      Client[]
  appointments Appointment[]
  logs         ActivityLog[]

  @@map("tenants")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamentos
  appointments Appointment[]
  logs         ActivityLog[]

  @@map("users")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String?
  notes     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamentos
  appointments Appointment[]

  @@map("clients")
}

model Appointment {
  id          String            @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relacionamento com tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamentos
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relacionamento com tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamento com usuário
  userId String?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

// Enums
enum UserRole {
  SUPERADMIN
  ADMIN
  AGENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
